#!/usr/bin/env node
import { chmodSync, mkdirSync, writeFileSync, existsSync } from "node:fs";
import { spawnSync } from "node:child_process";
import { dirname, resolve } from "node:path";
import { fileURLToPath } from "node:url";

const __dirname = dirname(fileURLToPath(import.meta.url));
const appRoot = resolve(__dirname, "..");
const homeDir = process.env.HOME;

if (!homeDir) {
  console.error("[pnet-tool] 未能识别 $HOME 环境变量，无法安装 telnet 处理程序。");
  process.exit(1);
}

const applicationsDir = resolve(homeDir, ".local/share/applications");
const desktopFileName = "pnet-tool-telnet.desktop";
const desktopFilePath = resolve(applicationsDir, desktopFileName);
const launchScriptPath = resolve(appRoot, "scripts/launch-telnet.sh");

if (!existsSync(launchScriptPath)) {
  console.error("[pnet-tool] 未找到 launch-telnet.sh，确保仓库完整并重新安装依赖。");
  process.exit(1);
}

try {
  chmodSync(launchScriptPath, 0o755);
} catch (error) {
  console.warn("[pnet-tool] 无法为 launch-telnet.sh 设置可执行权限，请手动执行 chmod +x", error);
}

mkdirSync(applicationsDir, { recursive: true });

const desktopEntry = `# Automatically generated by scripts/install-telnet-handler.mjs
[Desktop Entry]
Name=PNET Tool Telnet Handler
Comment=Handle telnet protocol links with PNET Tool (development)
Exec=${launchScriptPath} %u
Type=Application
Terminal=false
NoDisplay=true
MimeType=x-scheme-handler/telnet;
Categories=Network;
`;

writeFileSync(desktopFilePath, desktopEntry, "utf8");

const xdgResult = spawnSync("xdg-mime", ["default", desktopFileName, "x-scheme-handler/telnet"], {
  stdio: "inherit",
});

if (xdgResult.status !== 0) {
  console.warn("[pnet-tool] xdg-mime 命令执行失败，请手动运行: xdg-mime default", desktopFileName, "x-scheme-handler/telnet");
}

const updateDb = spawnSync("update-desktop-database", [applicationsDir], { stdio: "inherit" });
if (updateDb.status !== 0) {
  console.warn("[pnet-tool] update-desktop-database 失败或未安装，可忽略该警告。");
}

console.log("[pnet-tool] 已在", desktopFilePath, "写入 telnet 处理程序，并尝试注册到系统。请在 Chrome 中重试 telnet 链接。");
