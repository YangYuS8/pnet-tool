#!/usr/bin/env bash
# pnet-telnet: Telnet/console URL handler for PnetLab + kitty (robust, no flashing exit)
# Usage (browser or manual):
#   pnet-telnet telnet://IP:PORT
#   pnet-telnet IP:PORT
#   pnet-telnet IP PORT
# Environment toggles:
#   AUTO_RECONNECT=1     -> 无限重连循环
#   RECONNECT_DELAY=秒   -> 默认 5
#   USE_TMUX=1           -> 整合到 tmux session (TMUX_SESSION 可指定名)
#   TELNET_IMPL=nc       -> 使用 netcat 替代 telnet
#   HOLD_ON_EXIT=1       -> 非重连模式结束后等待按回车（防止窗口闪退）
#   QUIET=1              -> 减少提示输出
# Logging: 每次会话写入 ~/pnetlab-logs/host_port_ts.log
# 设计变更：去掉 export 函数 + 数组方式，避免 bash -lc 环境丢失导致窗口瞬闭。
set -e -o pipefail

RAW=${1:-}
[[ -z ${RAW} ]] && { echo "[pnet-telnet] missing argument" >&2; exit 1; }

# Shift forms like IP PORT
if [[ $RAW != *:* && $# -ge 2 ]]; then
  RAW="$1:$2"
fi

# Remove scheme
if [[ $RAW =~ ^telnet:// ]]; then
  RAW=${RAW#telnet://}
fi

# 可选配置文件: ~/.config/pnet-telnet/config (或 PNET_TELNET_CONFIG 指定)
CONFIG_FILE=${PNET_TELNET_CONFIG:-$HOME/.config/pnet-telnet/config}
if [[ -f $CONFIG_FILE ]]; then
  # shellcheck disable=SC1090
  source "$CONFIG_FILE"
fi

HOST=${RAW%%:*}
PORT=${RAW##*:}
# 若浏览器在 VM 内生成 127.0.0.1 形式，但此脚本在宿主执行，可通过 FORCE_LOOPBACK_MAP 设置重写。
FORCE_LOOPBACK_MAP=${FORCE_LOOPBACK_MAP:-}
if [[ $HOST == 127.0.0.1 && -n $FORCE_LOOPBACK_MAP ]]; then
  [[ ${DEBUG:-0} -eq 1 ]] && echo "[DEBUG] mapping 127.0.0.1 -> $FORCE_LOOPBACK_MAP" >> "$LOG_DIR/debug.log" 2>/dev/null || true
  HOST=$FORCE_LOOPBACK_MAP
fi
#!/usr/bin/env bash
# Ultra-minimal pnet-telnet
# 只做一件事：解析地址 -> 打开终端运行 telnet HOST PORT
# 不做：日志 / 聚焦 / 重连 / tmux / expect / 配置文件解析
set -e
RAW=${1:-}
[[ -z $RAW ]] && { echo "Usage: pnet-telnet telnet://HOST:PORT | HOST:PORT | HOST PORT" >&2; exit 1; }
if [[ $RAW != *:* && $# -ge 2 ]]; then RAW="$1:$2"; fi
[[ $RAW =~ ^telnet:// ]] && RAW=${RAW#telnet://}
HOST=${RAW%%:*}; PORT=${RAW##*:}
[[ -z $HOST || -z $PORT || $HOST == $PORT ]] && { echo "bad address: $RAW" >&2; exit 2; }
command -v telnet >/dev/null 2>&1 || { echo "need 'telnet' (inetutils)" >&2; exit 3; }

# 选终端（最简单）
for T in "$TERM_BIN" kitty xterm; do
  [[ -n $T ]] && command -v "$T" >/dev/null 2>&1 && TERM_BIN=$T && break
done
[[ -z ${TERM_BIN:-} ]] && { echo "no terminal found (tried kitty xterm)" >&2; exit 4; }
TITLE="PNet-${HOST}:${PORT}"

if [[ $TERM_BIN == kitty ]]; then
  kitty --title "$TITLE" telnet "$HOST" "$PORT" & disown
elif [[ $TERM_BIN == xterm ]]; then
  xterm -T "$TITLE" -e telnet "$HOST" "$PORT" & disown
else
  "$TERM_BIN" telnet "$HOST" "$PORT" & disown || true
fi
exit 0
    echo "[pnet-telnet] expect 未安装, 略过初始命令注入" >&2
