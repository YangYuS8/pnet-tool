name: Build and Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9"

jobs:
  build-linux:
    name: Build Linux AppImage (Tauri)
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Web
        run: pnpm run build:web

      - name: Build Tauri (AppImage)
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          pnpm tauri build

      - name: Collect artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist-artifacts
          APP_DIR="src-tauri/target/release/bundle/appimage"
          echo "Looking for artifacts in: $APP_DIR"
          ls -la "$APP_DIR" || true
          shopt -s nullglob
          for file in "$APP_DIR"/*.AppImage "$APP_DIR"/*.AppImage.sig "$APP_DIR"/*.tar.gz "$APP_DIR"/*.tar.gz.sig "$APP_DIR"/*.yml; do
            if [ -f "$file" ]; then
              echo "Copying $file"
              cp "$file" dist-artifacts/
            fi
          done
          echo "Collected:" && ls -la dist-artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux
          path: dist-artifacts

  build-windows:
    name: Build Windows MSI (Tauri)
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Ensure WiX Toolset
        run: |
          choco upgrade wixtoolset -y --no-progress
        shell: pwsh

      - name: Install ImageMagick (for ICO)
        run: |
          choco upgrade imagemagick -y --no-progress
        shell: pwsh

      - name: Prepare Windows icon (ICO)
        shell: pwsh
        run: |
          $png = "build/icons/pnet-tool.png"
          $icoDir = "src-tauri/icons"
          $ico = Join-Path $icoDir "icon.ico"
          if (!(Test-Path $icoDir)) { New-Item -ItemType Directory -Path $icoDir -Force | Out-Null }
          if (Test-Path $png) {
            magick convert $png -define icon:auto-resize=16,24,32,48,64,128,256 $ico
            Write-Host "ICO generated at $ico"
          } else {
            Write-Error "PNG icon not found at $png"
            exit 1
          }

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Web
        run: pnpm run build:web
        shell: pwsh

      - name: Build Tauri (MSI)
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          pnpm tauri build

      - name: Collect artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist-artifacts -Force | Out-Null
          $msiDir = "src-tauri/target/release/bundle/msi"
          if (Test-Path $msiDir) {
            Get-ChildItem -Path $msiDir -Include *.msi,*.yml -File -Recurse | ForEach-Object {
              Write-Host "Copying $($_.FullName)"
              Copy-Item $_.FullName dist-artifacts/
            }
          } else {
            Write-Host "MSI directory not found: $msiDir"
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: dist-artifacts

  release:
    name: Publish Release
    needs:
      - build-linux
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: List assets
        run: ls -R release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            release-assets/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
