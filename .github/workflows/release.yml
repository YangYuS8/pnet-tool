name: Build and Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9"

jobs:
  build-linux:
    name: Build Linux Portable (binary + installer)
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Web
        run: pnpm run build:web

      - name: Build Tauri (binary only)
        run: |
          pnpm run build:binary

      - name: Package portable tar.gz
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist-artifacts
          BIN="src-tauri/target/release/pnet-tool"
          test -x "$BIN" || { echo "Binary not found: $BIN"; exit 1; }
          VERSION="${GITHUB_REF_NAME#v}"
          NAME="pnet-tool-${VERSION}-linux-x64"
          STAGE="stage-$NAME"
          rm -rf "$STAGE"
          mkdir -p "$STAGE"
          cp "$BIN" "$STAGE/"
          cp -f build/icons/pnet-tool.png "$STAGE/" 2>/dev/null || true
          cp -f scripts/install-linux-portable.sh "$STAGE/install.sh"
          chmod +x "$STAGE/install.sh" "$STAGE/pnet-tool"
          tar -C "$STAGE" -czf "dist-artifacts/$NAME.tar.gz" .
          echo "Created dist-artifacts/$NAME.tar.gz"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux
          path: dist-artifacts
          if-no-files-found: error

  build-windows:
    name: Build Windows Portable (binary + installer)
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Ensure WiX Toolset
        run: |
          choco upgrade wixtoolset -y --no-progress
        shell: pwsh

      - name: Install ImageMagick (for ICO)
        run: |
          choco upgrade imagemagick -y --no-progress
        shell: pwsh

      - name: Prepare Windows icon (ICO)
        shell: pwsh
        run: |
          $png = "build/icons/pnet-tool.png"
          $icoDir = "src-tauri/icons"
          $ico = Join-Path $icoDir "icon.ico"
          if (!(Test-Path $icoDir)) { New-Item -ItemType Directory -Path $icoDir -Force | Out-Null }
          if (Test-Path $png) {
            magick convert $png -define icon:auto-resize=16,24,32,48,64,128,256 $ico
            Write-Host "ICO generated at $ico"
          } else {
            Write-Error "PNG icon not found at $png"
            exit 1
          }

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Web
        run: pnpm run build:web
        shell: pwsh

      - name: Build Tauri (binary only)
        run: |
          pnpm run build:binary

      - name: Package portable zip
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Path dist-artifacts -Force | Out-Null
          $bin = "src-tauri/target/release/pnet-tool.exe"
          if (!(Test-Path $bin)) { Write-Error "Binary not found: $bin" }
          $Version = "$env:GITHUB_REF_NAME".TrimStart('v')
          $Name = "pnet-tool-$Version-windows-x64"
          $Stage = "stage-$Name"
          if (Test-Path $Stage) { Remove-Item -Recurse -Force $Stage }
          New-Item -ItemType Directory -Path $Stage | Out-Null
          Copy-Item $bin (Join-Path $Stage 'pnet-tool.exe')
          if (Test-Path 'build/icons/pnet-tool.png') { Copy-Item 'build/icons/pnet-tool.png' (Join-Path $Stage 'pnet-tool.png') }
          Copy-Item 'scripts/install-windows-portable.ps1' (Join-Path $Stage 'install.ps1')
          Compress-Archive -Path (Join-Path $Stage '*') -DestinationPath (Join-Path 'dist-artifacts' "$Name.zip") -Force
          Write-Host "Created dist-artifacts/$Name.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: dist-artifacts
          if-no-files-found: error

  release:
    name: Publish Release
    needs:
      - build-linux
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts (all)
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: release-assets
          merge-multiple: true

      - name: Ensure assets dir and list
        run: |
          mkdir -p release-assets
          ls -R release-assets || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            release-assets/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
